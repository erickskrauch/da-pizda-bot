import { getResponse } from './engine';

describe('getResponse', () => {
    describe('should trim input', () => expect(getResponse('  –¥–∞ \n')).toBe('–ø–∏–∑–¥–∞'));

    describe('should correctly handle case', () => {
        it('should handle lower case', () => expect(getResponse('–¥–∞')).toBe('–ø–∏–∑–¥–∞'));
        it('should handle upper case', () => expect(getResponse('–î–ê')).toBe('–ü–ò–ó–î–ê'));

        it('should handle upper case of the first letter', () => expect(getResponse('–î–∞')).toBe('–ü–∏–∑–¥–∞'));
        it('should handle upper case of the last letter', () => expect(getResponse('–¥–ê')).toBe('–ø–∏–∑–¥–ê'));
    });

    describe('should correctly handle characters around', () => {
        it('should handle single character at the beginning', () => expect(getResponse(',–î–∞')).toBe(',–ü–∏–∑–¥–∞'));
        it('should handle multiple characters at the beginning', () => expect(getResponse('???–î–∞')).toBe('???–ü–∏–∑–¥–∞'));

        it('should handle single character at the end', () => expect(getResponse('–î–∞.')).toBe('–ü–∏–∑–¥–∞.'));
        it('should handle multiple characters at the end', () => expect(getResponse('–î–∞!!!')).toBe('–ü–∏–∑–¥–∞!!!'));

        it('should correctly inverse single ?', () => expect(getResponse('–î–∞?')).toBe('–ü–∏–∑–¥–∞!'));
        it('should correctly inverse single !', () => expect(getResponse('–î–∞!')).toBe('–ü–∏–∑–¥–∞?'));
    });

    describe('should skip when contains numeric characters around', () => {
        it('should skip numerics after', () => expect(getResponse('–î–∞, 12')).toBeUndefined());
        it('should skip numerics before', () => expect(getResponse('12, –¥–∞')).toBeUndefined());
    });

    describe('should handle whitespaces', () => {
        it('should detect single space between –¥ and –∞ letters', () => expect(getResponse('–¥ –∞')).toBe('–ø –∏ –∑ –¥ –∞'));
        it('should detect multiple spaces between –¥ and –∞ letters', () => expect(getResponse('–¥  –∞')).toBe('–ø  –∏  –∑  –¥  –∞'));
        it('should detect new line between –¥ and –∞ letters', () => expect(getResponse('–¥\n–∞')).toBe('–ø\n–∏\n–∑\n–¥\n–∞'));
        it('should detect multiple new lines between –¥ and –∞ letters', () => expect(getResponse('–¥\n\n–∞')).toBe('–ø\n\n–∏\n\n–∑\n\n–¥\n\n–∞'));
        // https://en.wikipedia.org/wiki/Non-breaking_space
        it('should detect word-joiner between –¥ and –∞ letters', () => expect(getResponse('–¥\u2060–∞')).toBe('–ø\u2060–∏\u2060–∑\u2060–¥\u2060–∞'));
        it('should detect figure-space space between –¥ and –∞ letters', () => expect(getResponse('–¥\u2007–∞')).toBe('–ø\u2007–∏\u2007–∑\u2007–¥\u2007–∞'));
        it('should detect narrow non-breaking space between –¥ and –∞ letters', () => expect(getResponse('–¥\u202f–∞')).toBe('–ø\u202f–∏\u202f–∑\u202f–¥\u202f–∞'));
    });

    describe('should handle some interesting cases', () => {
        it('should detect not only spaces', () => expect(getResponse('–¥.–∞')).toBe('–ø.–∏.–∑.–¥.–∞'));
        it('should detect different characters', () => expect(getResponse('–¥.!?–∞')).toBe('–ø.!?–∏.!?–∑.!?–¥.!?–∞'));

        it('should detect repeating –¥ letter', () => expect(getResponse('–¥–¥–∞')).toBe('–ø–ø–∏–∑–¥–∞'));
        it('should detect repeating –¥ letter and preserve case', () => expect(getResponse('–¥–î–¥–î–∞')).toBe('–ø–ü–ø–ü–∏–∑–¥–∞'));

        it('should detect repeating –∞ letter', () => expect(getResponse('–¥–∞–∞')).toBe('–ø–∏–∑–¥–∞–∞'));
        it('should detect repeating –∞ letter and preserve case', () => expect(getResponse('–¥–∞–ê–∞–ê')).toBe('–ø–∏–∑–¥–∞–ê–∞–ê'));
    });

    describe('should handle attempts to use english characters', () => {
        it('should handle English d instead of –¥', () => expect(getResponse('D–∞')).toBe('–ü–∏–∑d–∞'));
        it('should handle mix of d and –¥', () => expect(getResponse('D–¥d–î–∞')).toBe('–ü–ø–ø–ü–∏–∑d–∞'));

        it('should handle English a instead of –∞', () => expect(getResponse('–îa')).toBe('–ü–∏–∑–¥a'));
        it('should handle mix of a and –∞', () => expect(getResponse('–îa–êA–∞')).toBe('–ü–∏–∑–¥a–êA–∞'));

        it('should handle @', () => expect(getResponse('–î@')).toBe('–ü–∏–∑–¥@'));
        it('should handle ƒÖ', () => expect(getResponse('–îƒÖ')).toBe('–ü–∏–∑–¥ƒÖ'));
        it('should handle ƒÑ', () => expect(getResponse('–îƒÑ')).toBe('–ü–ò–ó–îƒÑ'));
        it('should handle ¬™', () => expect(getResponse('–î¬™')).toBe('–ü–∏–∑–¥¬™'));
        it('should handle √°', () => expect(getResponse('–î√°')).toBe('–ü–∏–∑–¥√°'));
        it('should handle √Å', () => expect(getResponse('–î√Å')).toBe('–ü–ò–ó–î√Å'));

        it('should handle both English letters', () => expect(getResponse('Da')).toBe('Pizda'));
    });

    describe('should handle pictographic', () => {
        it('should handle emoji after text', () => expect(getResponse('–î–∞ üòä')).toBe('–ü–∏–∑–¥–∞ üòä'));
        it('should handle emoji after text', () => expect(getResponse('üòä –î–∞')).toBe('üòä –ü–∏–∑–¥–∞'));
        it('should handle combined emojis', () => expect(getResponse('–î–∞ üë©üèæ‚Äçüåæ')).toBe('–ü–∏–∑–¥–∞ üë©üèæ‚Äçüåæ'));
        it('should handle pictographic after text', () => expect(getResponse('–î–∞ ‚ô°')).toBe('–ü–∏–∑–¥–∞ ‚ô°'));
        it('should handle pictographic after text', () => expect(getResponse('‚ô° –î–∞')).toBe('‚ô° –ü–∏–∑–¥–∞'));
    });

    describe('should be forgiven if the answer is more detailed', () => {
        it('case 1', () => expect(getResponse('–¥–∞, –º—ã –º–∏–ª–æ—Å–µ—Ä–¥–Ω—ã')).toBeUndefined());
        it('case 2', () => expect(getResponse('–º—ã –º–∏–ª–æ—Å–µ—Ä–¥–Ω—ã, –¥–∞')).toBeUndefined());
        it('case 3', () => expect(getResponse('–¥–∞!\n–º—ã –º–∏–ª–æ—Å–µ—Ä–¥–Ω—ã')).toBeUndefined());
    });
});
